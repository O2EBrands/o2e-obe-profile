<?php

/**
 * @file
 * Hooks for form alterations.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter().
 */
function o2e_obe_form_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['#webform_id']) && $form['#webform_id'] === 'o2e_webform') {
    $tempstore_service = \Drupal::service('tempstore.private')->get('o2e_obe_salesforce');
    $current_page = $form_state->get('current_page');
    $page_array = !empty($form_state->get('pages')) ? array_keys($form_state->get('pages')) : [];
    foreach ($page_array as $page) {
      if ($current_page === $page) {
        if (isset($form['elements'][$current_page]['service_id'])) {
          // Populate Service ID.
          $serviceId = \Drupal::service('tempstore.private')->get('o2e_obe_salesforce')->get('response');
          $form['elements'][$current_page]['service_id']['#default_value'] = $serviceId['service_id'];
        }
        if (isset($form['elements'][$current_page]['holdtime_data'])) {
          // Check for Show/Hide Slot Hold Time Message Configurations.
          $salesForceConfiguration = \Drupal::config('o2e_obe_salesforce.settings');
          $slotHoldTimeConfigStatus = $salesForceConfiguration->get('sf_available_time')['show_holdtime_message'];
          $slotHoldTimeTempStatus = $tempstore_service->get('slotHoldTime');
          if ($slotHoldTimeConfigStatus == TRUE && $slotHoldTimeTempStatus == TRUE) {
            // Get pick up date and arrival time.
            if (!empty($form_state->getValue('pick_up_date'))) {
              $pick_up_date = $form_state->getValue('pick_up_date');
              $arrival_time = $form_state->getValue('arrival_time');
            }
            // Get Slot Hold Time Message and Slot Hold Time Sub Message.
            if (!empty($salesForceConfiguration->get('sf_available_time.slot_holdtime_message'))) {
              $slot_holdtime_message = $salesForceConfiguration->get('sf_available_time.slot_holdtime_message');
              $slot_holdtime_sub_message = !empty($salesForceConfiguration->get('sf_available_time.slot_holdtime_sub_message'))
              ? $salesForceConfiguration->get('sf_available_time.slot_holdtime_sub_message')
              : '';
              // Design the message.
              $hold_time_message = '<div class="holdtime-section"><div class="holdtime-main">' . t($slot_holdtime_message) . '<span class="hold-slot">' . $pick_up_date . ' ' . $arrival_time . '</span></div><div class="holdtime-subtext">' . t($slot_holdtime_sub_message) . '</div></div>';
              $form['elements'][$current_page]['holdtime_data']['#access'] = TRUE;
              $form['elements'][$current_page]['holdtime_data']['#template'] = $hold_time_message;
            }
          }
        }
        if (isset($form['elements'][$current_page]['address'])) {
          $form['elements'][$current_page]['address']['#after_build'][] = '_update_address';
          // Get Data related to postal code from tempstore.
          $postal_code_data = $tempstore_service->get('postalCodeData');
          // Auto Populate state code and postal code in Address field.
          $form['elements'][$current_page]['address']['#default_value']['postal_code'] = $postal_code_data['zip_code'];
          $form['elements'][$current_page]['address']['#default_value']['state_province'] = $postal_code_data['state'];
          // Set the country name based on postal code.
          $country = '';
          $zip_code = $postal_code_data['zip_code'];
          if (preg_match('#[0-9]{5}#', $zip_code)) {
            $country = 'United States';
            $tempstore_service->set('country_code', 'US');
          }
          elseif (preg_match('/^([a-zA-Z]\d[a-zA-Z])\ {0,1}(\d[a-zA-Z]\d)$/', $zip_code)) {
            $country = 'Canada';
            $tempstore_service->set('country_code', 'CA');
          }
          elseif (preg_match('#[0-9]{4}#', $zip_code)) {
            $country = 'Australia';
            $tempstore_service->set('country_code', 'AU');
          }
          $form['elements'][$current_page]['address']['#default_value']['country'] = $country;
        }
      }
      // 15 mins slot booking time starts from step 2 for all brands.
      if ($current_page === 'step2') {
        $current_time = \Drupal::service('datetime.time')->getRequestTime();
        \Drupal::service('tempstore.private')->get('o2e_obe_salesforce')->set('currentLocalTime', [
          'currentTimeStamp' => $current_time,
        ]);
      }
    }

    // Brand name attached to drupalSettings.
    $brand_name = \Drupal::config('o2e_obe_common.settings')
    ->get('o2e_obe_common.brand');
    $form['#attached']['drupalSettings']['brand_name'] = (!empty($brand_name)) ? $brand_name : 'default';
  }
}

/**
 * Custom function to hide country field.
 */
function _update_address($element, FormStateInterface $form_state) {
  $element['country']['#attributes']['hidden'] = TRUE;
  return $element;
}

/**
 * Custom Redirection of form after 15 mins expiry.
 */
function goto_step($page, $pages, FormStateInterface $form_state) {
  // Convert associative array to index for easier manipulation.
  $all_keys = array_keys($pages);
  $goto_destination_page_index = array_search($page, $all_keys);
  if ($goto_destination_page_index > 0) {
    // The backend pointer for page will add 1 so to go our page we must -1.
    $form_state->set('current_page', $all_keys[$goto_destination_page_index]);
    $form_state->setRebuild();
  }
}

/**
 * Function to check expiry of 900 seconds.
 */
function check_local_time_expiry() {
  $currentTime = \Drupal::service('datetime.time')->getRequestTime();
  $currentLocalTimeTemp = \Drupal::service('tempstore.private')->get('o2e_obe_salesforce')->get('currentLocalTime');
  $service_expiry = \Drupal::config('o2e_obe_salesforce.settings')->get('sf_verify_area')['service_expiry'];
  $service_expiry = (int)($service_expiry);
  if ($currentLocalTimeTemp['currentTimeStamp']) {
    $timeDifference = $currentTime - $currentLocalTimeTemp['currentTimeStamp'];
    if (abs($timeDifference) < $service_expiry) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  else {
    return FALSE;
  }
}
